body, html, h1, h2, h3, h4, h5, h6, ul, ol, dl, dt, dd, p {
  margin: 0;
  padding: 0;
}

ul, ol {
  list-style: none;
}

a {
  color: #333;
  text-decoration: none;
}

img {
  vertical-align: top;
}

.btn {
  display: inline-block;
  position: relative;
  width: 40px;
  height: 40px;
  text-indent: -9999px;
  overflow: hidden;
  box-sizing: border-box;
  border: 1px solid #222222;
  border-radius: 6px;
}

.btn:after {
  content: '';
  position: absolute;
  display: inline-block;
  vertical-align: middle;
  width: 4px;
  height: 4px;
  -webkit-transform: translate(-50%, -50%) scale(0.82353, 1) rotate(45deg);
  transform: translate(-50%, -50%) scale(0.82353, 1) rotate(45deg);
  margin-left: 1px;
  border-left: 4px solid #222;
  border-bottom: 4px solid #222;
  top: 50%;
  right: 0;
}

.btn.disable:after {
  border-color: #ccc;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
